from django.db import models
from django.utils import timezone
import random

from accounts.models import Profile # Import model Profile ƒë·ªÉ li√™n k·∫øt ng∆∞·ªùi d√πng

# Model 1: Character
class Character(models.Model):
    # T√™n nh√¢n v·∫≠t
    name = models.CharField(max_length=100)

    # Gi√° nh√¢n v·∫≠t (v√≠ d·ª•: 100 xu)
    price = models.IntegerField(default=100)

    # ·∫¢nh nh√¢n v·∫≠t khi ƒë·ª©ng y√™n (idle)
    image_idle = models.ImageField(upload_to='characters/idle/', blank=True, null= True)

    # ·∫¢nh nh√¢n v·∫≠t khi n√≥i chuy·ªán (talk)
    image_talk = models.ImageField(upload_to='characters/talk/', blank=True, null=True)

    # C√°c m·ª©c ƒë·ªô hi·∫øm (rarity) c·ªßa nh√¢n v·∫≠t
    RARITY_CHOICES = [('common', 'Th∆∞·ªùng'),
                      ('rare', 'Hi·∫øm'),
                      ('epic', 'C·ª±c hi·∫øm'),]
    
    # Tr∆∞·ªùng l∆∞u ƒë·ªô hi·∫øm, ch·ªçn t·ª´ c√°c gi√° tr·ªã ·ªü tr√™n
    rarity = models.CharField(max_length=20, choices=RARITY_CHOICES, default='common')

    # M√¥ t·∫£ chi ti·∫øt nh√¢n v·∫≠t
    description = models.TextField(blank=True)

    # Danh s√°ch c√°c c√¢u n√≥i ƒë·ªông vi√™n (d·∫°ng JSON)
    motivation_quotes = models.JSONField(default=list)

    def __str__(self):
        '''Hi·ªÉn th·ªã t√™n nh√¢n v·∫≠t trong admin'''
        return f"{self.name} ({self.get_rarity_display()})"

    def get_random_quote(self):
        '''Tr·∫£ v·ªÅ m·ªôt c√¢u n√≥i ng·∫´u nhi√™n trong danh s√°ch ƒë·ªông vi√™n.
        D√πng khi hi·ªÉn th·ªã nh√¢n v·∫≠t tr√™n giao di·ªán h·ªçc t·∫≠p.'''
        if self.motivation_quotes:
            return random.choice(self.motivation_quotes)
        return "H√£y c·ªë l√™n, b·∫°n l√†m ƒë∆∞·ª£c m√†! üí™"

    class Meta:
        # C·∫•u h√¨nh hi·ªÉn th·ªã trong Django Admin
        verbose_name = "Character (Nh√¢n v·∫≠t)"
        verbose_name_plural = "Characters (Danh s√°ch nh√¢n v·∫≠t)"
        # S·∫Øp x·∫øp nh√¢n v·∫≠t theo gi√° tƒÉng d·∫ßn
        ordering = ['price']


# Model 2: Inventory (Danh s√°ch nh√¢n v·∫≠t ng∆∞·ªùi d√πng ƒëang s·ªü h·ªØu)
class Inventory(models.Model):
    # Li√™n k·∫øt t·ªõi ng∆∞·ªùi d√πng (th√¥ng qua Profile)
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='inventory')
    # Li√™n k·∫øt t·ªõi nh√¢n v·∫≠t ƒë∆∞·ª£c s·ªü h·ªØu
    character = models.ForeignKey(Character, on_delete=models.CASCADE, related_name='owned_by_users')
    # Ng√†y mua nh√¢n v·∫≠t
    purchase_date = models.DateTimeField(auto_now_add=True)
    # Tr·∫°ng th√°i k√≠ch ho·∫°t nh√¢n v·∫≠t (True = ƒëang d√πng)
    is_active = models.BooleanField(default=False)

    def __str__(self):
        '''Hi·ªÉn th·ªã th√¥ng tin nh√¢n v·∫≠t trong inventory'''
        return f"{self.profile.user.username} s·ªü h·ªØu {self.character.name}"

    def activate(self):
        '''K√≠ch ho·∫°t nh√¢n v·∫≠t n√†y l√†m ƒë·ªìng h√†nh ch√≠nh.
        - ƒê·∫∑t is_active=True cho nh√¢n v·∫≠t n√†y.
        - ƒê·∫∑t is_active=False cho t·∫•t c·∫£ nh√¢n v·∫≠t kh√°c c·ªßa ng∆∞·ªùi d√πng.
        '''
        # B·ªè k√≠ch ho·∫°t c√°c nh√¢n v·∫≠t kh√°c c·ªßa c√πng ng∆∞·ªùi d√πng
        Inventory.objects.filter(profile=self.profile).update(is_active=False)
        # K√≠ch ho·∫°t nh√¢n v·∫≠t hi·ªán t·∫°i
        self.is_active = True
        self.save()
    
    class Meta:
        # C·∫•u h√¨nh hi·ªÉn th·ªã trong Django Admin
        verbose_name = "Inventory (Kho nh√¢n v·∫≠t)"
        verbose_name_plural = "Inventories (Kho nh√¢n v·∫≠t c·ªßa ng∆∞·ªùi d√πng)"
        # M·ªôt ng∆∞·ªùi kh√¥ng th·ªÉ s·ªü h·ªØu 1 nh√¢n v·∫≠t hai l·∫ßn
        unique_together = ('profile', 'character')


# Model 3: Achievement (Th√†nh t√≠ch h·ªçc t·∫≠p)
class Achievement(models.Model):
    # Li√™n k·∫øt t·ªõi h·ªì s∆° ng∆∞·ªùi d√πng
    profile = models.ForeignKey(Profile, on_delete=models.CASCADE, related_name='achievements')

    # Ti√™u ƒë·ªÅ c·ªßa th√†nh t√≠ch
    title = models.CharField(max_length=200)

    # M√¥ t·∫£ chi ti·∫øt v·ªÅ th√†nh t√≠ch
    description = models.TextField(blank=True)

    # S·ªë xu th∆∞·ªüng khi ƒë·∫°t th√†nh t√≠ch
    reward_coins = models.PositiveIntegerField(default=0)

    # Th·ªùi ƒëi·ªÉm ƒë·∫°t th√†nh t√≠ch
    earned_at = models.DateTimeField(default=timezone.now)

    # ƒê√°nh d·∫•u ƒë√£ nh·∫≠n th∆∞·ªüng hay ch∆∞a
    is_claimed = models.BooleanField(default=False)

    def __str__(self):
        '''Hi·ªÉn th·ªã t√™n th√†nh t√≠ch v√† ng∆∞·ªùi ƒë·∫°t'''
        return f"{self.profile.user.username} - {self.title}"

    def claim(self):
        '''Nh·∫≠n ph·∫ßn th∆∞·ªüng (claim).
        - N·∫øu ch∆∞a claim ‚Üí c·ªông xu v√†o t√†i kho·∫£n ng∆∞·ªùi d√πng.
        - ƒê√°nh d·∫•u th√†nh t√≠ch l√† ƒë√£ nh·∫≠n.'''
        if not self.is_claimed:
            self.profile.coins += self.reward_coins
            self.profile.save()
            self.is_claimed = True
            self.save()

    class Meta:
        # C·∫•u h√¨nh hi·ªÉn th·ªã trong Django Admin
        verbose_name = "Achievement (Th√†nh t√≠ch)"
        verbose_name_plural = "Achievements (C√°c th√†nh t√≠ch)"
        # S·∫Øp x·∫øp c√°c th√†nh t√≠ch m·ªõi nh·∫•t l√™n ƒë·∫ßu
        ordering = ['-earned_at']
